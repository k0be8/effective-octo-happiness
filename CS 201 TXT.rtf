{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 HelveticaNeue-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red13\green96\blue2;\red230\green0\blue14;
}
{\*\expandedcolortbl;;\cssrgb\c0\c0\c0;\cssrgb\c506\c44277\c174;\cssrgb\c93213\c13483\c4656;
}
\margl1440\margr1440\vieww24020\viewh18640\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs48 \cf2 CS 201 Project: Final Draft\

\fs28 This was converted to a .txt file as per assignment instructions.
\fs24 \
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \
import java.util.*;\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3 //import java.util.Scanner;\
// Scanner is imported to read user inputs but reading through the assignment requiring HashMap and TreeMap, I used the * to import all of them.\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2 \
public class Main \{\
    public static void main(String[] args) \{\
      
\f0\b \cf3 // Initialize a 2D array with states and their capitals, ordered by state name. This   structure allows us to pair the State with the correct Capital.\

\f1\b0 \cf2       \
        String[][] stateCapitals = \{\
            \{"Alabama", "Alaska", "Arizona", "Arkansas", "California", \
            "Colorado", "Connecticut", "Delaware", "Florida", "Georgia", \
            "Hawaii", "Idaho", "Illinois", "Indiana", "Iowa", "Kansas", \
            "Kentucky", "Louisiana", "Maine", "Maryland", "Massachusetts", \
            "Michigan", "Minnesota", "Mississippi", "Missouri", "Montana", \
            "Nebraska", "Nevada", "New Hampshire", "New Jersey", "New Mexico", \
            "New York", "North Carolina", "North Dakota", "Ohio", "Oklahoma", \
            "Oregon", "Pennsylvania", "Rhode Island", "South Carolina", \
            "South Dakota", "Tennessee", "Texas", "Utah", "Vermont", \
            "Virginia", "Washington", "West Virginia", "Wisconsin", "Wyoming"\},\
            \{"Montgomery", "Juneau", "Phoenix", "Little Rock", "Sacramento", \
            "Denver", "Hartford", "Dover", "Tallahassee", "Atlanta", \
            "Honolulu", "Boise", "Springfield", "Indianapolis", "Des Moines", \
            "Topeka", "Frankfort", "Baton Rouge", "Augusta", "Annapolis", \
            "Boston", "Lansing", "Saint Paul", "Jackson", "Jefferson City", \
            "Helena", "Lincoln", "Carson City", "Concord", "Trenton", \
            "Santa Fe", "Albany", "Raleigh", "Bismarck", "Columbus", \
            "Oklahoma City", "Salem", "Harrisburg", "Providence", "Columbia", \
            "Pierre", "Nashville", "Austin", "Salt Lake City", "Montpelier", \
            "Richmond", "Olympia", "Charleston", "Madison", "Cheyenne"\}\
        \};\
\
        Scanner scanner = new Scanner(System.in);\
        System.out.println("Please enter a capital:");\
        
\f0\b \cf3 // This will allow the user to interact with our guessing game program.
\f1\b0 \cf2 \
        \
        String userCapital = scanner.nextLine().trim();\
        boolean found = false;\
        
\f0\b \cf3 // I added the trim to remove any leading or trailing spots that the user might enter accidentally.\
      \
        // Check if the entered capital matches any in the array\
        // I made sure to not focus on capitalization to help the user out.\

\f1\b0 \cf2         for (int i = 0; i < stateCapitals[1].length; i++) \{\
            if (stateCapitals[1][i].equalsIgnoreCase(userCapital)) \{\
                System.out.println("Correct! " + userCapital + " is the capital of " + stateCapitals[0][i] + ".");\
              
\f0\b \cf3 // Tells the sure that they got the correct answer.
\f1\b0 \cf2 \
                found = true;\
                break;\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3                 // Exit the loop once a match is found.\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2             \}\
        \}\
\
        if (!found) \{\
            System.out.println("Incorrect. " + userCapital + " is not the capital of any U.S. state in our database.");\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3             // Tells the user they got the answer wrong.\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2         \}\
\
        
\f0\b \cf3 // Inform the user about the display of current array contents as per assignment directions. It will also show the user the way the array has been setup while also allowing them to see the answers. ;)
\f1\b0 \cf2  \
        System.out.println("Per assignment instructions, here are the states and their capitals:");\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3         // Displaying the current contents of the array.\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2         for (int i = 0; i < stateCapitals[0].length; i++) \{\
            System.out.println("State: " + stateCapitals[0][i] + ", Capital: " + stateCapitals[1][i]);\
        \}\
\
        
\f0\b \cf3 // Telling the user that per the assignemnt that a bubble sort will be used.\

\f1\b0 \cf2         System.out.println("I will now use a bubble sort to sort by Capital. Loading...");\
        
\f0\b \cf3 // Bubble sort will organize the data alphabetically based on the Capital names. \

\f1\b0 \cf2         for (int i = 0; i < stateCapitals[1].length - 1; i++) \{\
            for (int j = 0; j < stateCapitals[1].length - i - 1; j++) \{\
                if (stateCapitals[1][j].compareToIgnoreCase(stateCapitals[1][j + 1]) > 0) \{\
                    
\f0\b \cf3 // Swapping capitals and ignoring case sensitivity to order them alphabetically.
\f1\b0 \cf2 \
                    String temp = stateCapitals[1][j];\
                    stateCapitals[1][j] = stateCapitals[1][j + 1];\
                    stateCapitals[1][j + 1] = temp;\
                    
\f0\b \cf3 // Swapping corresponding states to maintain correct pairs which is the most important part to make sure the database is accurate with correct State and Capitals.\

\f1\b0 \cf2                     temp = stateCapitals[0][j];\
                    stateCapitals[0][j] = stateCapitals[0][j + 1];\
                    stateCapitals[0][j + 1] = temp;\
                \}\
            \}\
        \}\
\
      
\f0\b \cf3 // As per assignment instructions, we will ask the user to test their knowledge.
\f1\b0 \cf2 \
        System.out.println("Okay, now let's test your brain power! I have given you the list of Capitals and States. Enter as many state capitals you can. Enter 'Done' when finished. No Cheating!");\
\
      int correctCount = 0;\
      while (true) \{\
          String input = scanner.nextLine().trim();\
          if ("Done".equalsIgnoreCase(input)) \{\
              break;\
              
\f0\b \cf3 // Exit the loop when user is done entering capitals by entering done which is not case sensitive to make it easier for the user.\

\f1\b0 \cf2           \}\
          
\f0\b \cf3 // Check if the entered capital is in the sorted array.\

\f1\b0 \cf2           for (int i = 0; i < stateCapitals[1].length; i++) \{\
              if (input.equalsIgnoreCase(stateCapitals[1][i])) \{\
                  correctCount++;\
                  
\f0\b \cf3 // Increment correct count if the capital matches telling the user how many they got correct.\

\f1\b0 \cf2                   System.out.println("Okay, you got " + correctCount + " correct!");\
                  break;\
              \}\
          \}\
      \}\
      System.out.println("You got " + correctCount + " correct!");\
\

\f0\b \cf4       
\fs36 // ***** THIS IS PART 2 OF THE ASSIGNMENT SORTING AND SEARCHING WITH HASHMAP *****
\fs24 \

\f1\b0 \cf2 \
     
\f0\b \cf3  // Time to initialize a HashMap to store the states and their capitals which will be configured as key value pairs.
\f1\b0 \cf2 \
      HashMap<String, String> capitalMap = new HashMap<>();\
\pard\pardeftab720\partightenfactor0

\f0\b \cf3       // The for loop will iterate through the 2D array and each state is used at the key and the capital will be used as the value. This is more efficient since the key can be used to access the value vs a 2D array where you don' have to go through the whole dataset. This will be more valuable in larger databases.\
\pard\pardeftab720\partightenfactor0

\f1\b0 \cf2       for (int i = 0; i < stateCapitals[0].length; i++) \{\
          capitalMap.put(stateCapitals[0][i], stateCapitals[1][i]);\
      \}\
\
      
\f0\b \cf3 // As per assignment, I will print out the HashMap indicating that it is not ordered.\
      // This will print out the kay value pairs of the state and capital.\

\f1\b0 \cf2       System.out.println("As per assignment, I will display the HashMap's content which will be unordered:");\
      for (Map.Entry<String, String> entry : capitalMap.entrySet()) \{\
          System.out.println("State: " + entry.getKey() + ", Capital: " + entry.getValue());\
      \}\
\
      
\f0\b \cf3 // Using the TreeMap class will sort the map and put it in a binary tree.\

\f1\b0 \cf2       TreeMap<String, String> sortedCapitals = new TreeMap<>(capitalMap);\
\
      
\f0\b \cf3 // Now that it has been sorted, we will allow the user to interact with the program where they can enter a state and the correct capital will be displayed.\

\f1\b0 \cf2       System.out.println("\\nNow I'm here to make things easier for you. If you enter the state, I can tell you the capital! Enter 'done' when you are finished.");\
      
\f0\b \cf3 // The while loop will let the user interact with the program and get multiple answers until they feel they are done with the program.\

\f1\b0 \cf2       while (true) \{\
          String userInput = scanner.nextLine().trim();\
          if ("done".equalsIgnoreCase(userInput)) \{\
              System.out.println("Until next time...");\
              break;\
          \}\
\
          if (sortedCapitals.containsKey(userInput)) \{\
              System.out.println("The capital of " + userInput + " is " + sortedCapitals.get(userInput) + ".");\
          \} else \{\
              System.out.println("Sorry, that state is not recognized. Please try again, or type 'done' to exit.");\
            
\f0\b \cf3 // This will tell the user that an invalid entry was submitted.\

\f1\b0 \cf2           \}\
      \}\
      
\f0\b \cf3 // Good coding practice is to close a scanner to prevent memory loss.\

\f1\b0 \cf2       scanner.close();\
      \}\
    \}\
}